swagger: '2.0'
info:
  version: '1'
  title: Donut API
  description: >
    Send donuts with a single line of code (or two)..
host: example.com
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /donuts:
    post:
      description: Send a donut to anyone, anywhere.
      parameters:
        - name: body
          in: body
          description: Order Object
          required: true
          schema:
            $ref: '#/definitions/order'
      responses:
        '201':
          description: Order Created
          headers:
            Location:
              type: string
              description: The URI of the created order.
          schema:
            $ref: '#/definitions/order'
    get:
      description: List and Filter Orders
      parameters:
        - $ref: "#/parameters/status" 
        - $ref: "#/parameters/start_date" 
        - $ref: "#/parameters/end_date" 
      responses:
        '200':
          description: Collection of Orders
          schema:
            type: array
            items:
              $ref: '#/definitions/order'
  /donuts/{order_id}:
    parameters:
      - $ref: "#/parameters/order_id"    
    get:
      description: Fetch an Order
      responses:
        '200':
          description: A Single Order
          schema:
            $ref: '#/definitions/order'
        '404':
          description: Not Found
  /donuts/{order_id}/updates:
    parameters:
      - $ref: "#/parameters/order_id" 
    post:
      description: Update an Order
      parameters:
        - name: body
          in: body
          description: Update Object
          required: true
          schema:
            $ref: '#/definitions/order_update'
      responses:
        '201':
          description: Order Updated
          schema:
            $ref: '#/definitions/order'
        '403':
          description: Update Not Allowed
    get:
      description: List Order Updates
      parameters:
        - $ref: "#/parameters/start_date" 
        - $ref: "#/parameters/end_date" 
      responses:
        '200': 
          description: Collection of Updates
          schema:
            type: array
            items:
              $ref: '#/definitions/order_update'
  /donuts/{order_id}/cancel:
    parameters:
      - $ref: "#/parameters/order_id" 
    put:
      description: Cancel an Order
      parameters:
        - name: body
          in: body
          description: Update Object
          required: true
          schema:
            $ref: '#/definitions/order_cancel'
      responses:
        '201':
          description: Cancelation Request
          schema:
            $ref: '#/definitions/order_cancel'
    get:
      description: Get Cancel Status
      responses:
        '200':
          description: Cancelation Request
          schema:
            $ref: '#/definitions/order_cancel'
        '404':
          description: Not Found
definitions:
  # Full Objects
  order:
    type: object
    required:
      - amount
      - message
      - to
      - from
    properties:
      amount:
        $ref: '#/definitions/amount'
      message:
        $ref: '#/definitions/message'
      to:
        $ref: '#/definitions/person'
      from:
        $ref: '#/definitions/person'
      address:
        $ref: '#/definitions/address'
      webhook:
        $ref: '#/definitions/webhook'
      order_id:
        readOnly: true
        type: string
        format: uuid
      cost:
        readOnly: true
        type: integer
        description: Cost in cents.
      status:
        readOnly: true
        type: string
        enum:
          - pending
          - canceled
          - delivering 
          - completed
      created:
        $ref: '#/definitions/created'
  order_update:
    properties:
      amount:
        $ref: '#/definitions/amount'
      address:
        $ref: '#/definitions/address'
      message:
        $ref: '#/definitions/address'
      created:
        $ref: '#/definitions/created'
  order_cancel:
    properties:
      reason:
        type: string
        maxLength: 600
      webhook:
        $ref: '#/definitions/webhook'
      created:
        $ref: '#/definitions/created'
      status:
        readOnly: true
        type: string
        enum:
          - pending
          - completed
          - failed

  # Object Properties
  person:
    type: object
    required:
      - name
      - email
    properties:
      name:
        type: string
        maxLength: 100
      email:
        type: string
        maxLength: 100
  address:
    type: object
    required:
      - street
      - city
      - postal
      - country
    properties:
      street:
        type: string
      city:
        type: string
      postal:
        type: string
      country:
        type: string

  # Simple Properties
  amount:
    description: Amount of Items
    type: integer
    minimum: 12
    maximum: 144
  message:
    type: string
    maxLength: 600
  created:
    type: string
    format: date-time
    readOnly: true
  webhook:
    type: string
    format: url

# Reusable Parameters
parameters:
  order_id:
    in: path
    name: order_id
    description: Order ID
    required: true
    type: string
    format: uuid
  status:
    name: status
    in: query
    type: string
    enum:
      - pending
      - canceled
      - delivering 
      - completed
  start_date:
    name: start_date
    in: query
    type: string
    format: date-time
  end_date:
    name: end_date
    in: query
    type: string
    format: date-time
    

