swagger: '2.0'
info:
  version: '1'
  title: Donut API
  description: >
    Send donuts with a single line of code (or two)..
host: example.com
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /donuts:
    post:
      summary: Send a donut to anyone, anywhere.
      description: >
        Create a donut order by sending a the JSON body of an order request, the
        response will include both a `Location` header with the URI of the
        created order and the Order itself.
      parameters:
        - name: body
          in: body
          description: Order Object
          required: true
          schema:
            $ref: '#/definitions/order'
      responses:
        '201':
          description: Order Created
          headers:
            Location:
              type: string
              description: The URI of the created order.
          schema:
            $ref: '#/definitions/order'
    get:
      summary: List and Filter Orders
      description: >
        List past and in progress orders. Can be filtered by the order status,
        or a range of dates. The returned collection provides count and paging
        information
      parameters:
        - $ref: "#/parameters/status"
        - $ref: "#/parameters/start_date"
        - $ref: "#/parameters/end_date"
      responses:
        '200':
          description: Collection of Orders
          schema:
            $ref: '#/definitions/order_collection'
  /donuts/{order_id}:
    parameters:
      - $ref: "#/parameters/order_id"
    get:
      summary: Fetch an Order
      description: >
        Get a single order by ID.
      responses:
        '200':
          description: A Single Order
          schema:
            $ref: '#/definitions/order'
        '404':
          description: Not Found
  /donuts/{order_id}/updates:
    parameters:
      - $ref: "#/parameters/order_id"
    post:
      summary: Update an Order
      description: >
        Update an order modifying the amount, the address, or the message. The
        update may include one or more of those properties. A `403` status will
        be returned if the order can not be updated.
      parameters:
        - name: body
          in: body
          description: Update Object
          required: true
          schema:
            $ref: '#/definitions/order_update'
      responses:
        '201':
          description: Order Updated
          schema:
            $ref: '#/definitions/order'
        '403':
          description: Update Not Allowed
    get:
      summary: List Order Updates
      description: >
        A collection of updates made to the order. This shows the changes made to
        an order over time.
      parameters:
        - $ref: "#/parameters/start_date"
        - $ref: "#/parameters/end_date"
      responses:
        '200':
          description: Collection of Updates
          schema:
            type: array
            items:
              $ref: '#/definitions/order_update'
  /donuts/{order_id}/cancel:
    parameters:
      - $ref: "#/parameters/order_id"
    put:
      summary: Cancel an Order
      description: >
        Request that an order be canceled. This process may fail, successfully
        making the request does not guarantee the order is canceled. If a
        `webhook` is provided it will be notified of any changes. The payload
        will be the same as the cancellation request.

        This can only be done once.
      parameters:
        - name: body
          in: body
          description: Update Object
          required: true
          schema:
            $ref: '#/definitions/order_cancel'
      responses:
        '201':
          description: Cancelation Request
          schema:
            $ref: '#/definitions/order_cancel'
    get:
      summary: Get Cancel Status
      description: >
        Check the status of a cancellation request. If no request has been made
        a `404` status will be returned.
      responses:
        '200':
          description: Cancelation Request
          schema:
            $ref: '#/definitions/order_cancel'
        '404':
          description: Not Found

definitions:
  # Full Objects
  order:
    allOf:
      - $ref: '#/definitions/hal_self'
      - type: object
        required:
          - amount
          - message
          - to
          - from
          - address
        properties:
          amount:
            $ref: '#/definitions/amount'
          message:
            $ref: '#/definitions/message'
          to:
            $ref: '#/definitions/person'
          from:
            $ref: '#/definitions/person'
          address:
            $ref: '#/definitions/address'
          webhook:
            $ref: '#/definitions/webhook'
          order_id:
            readOnly: true
            type: string
            format: uuid
          cost:
            readOnly: true
            type: integer
            description: Cost in cents.
          status:
            readOnly: true
            type: string
            enum:
              - pending
              - canceled
              - delivering
              - completed
          created:
            $ref: '#/definitions/created'
  order_collection:
    allOf:
      - $ref: '#/definitions/hal_paging'
      - type: object
        properties:
          _embedded:
            type: object
            properties:
              orders:
                type: array
                items:
                  $ref: '#/definitions/order'
  order_update:
    allOf:
      - $ref: '#/definitions/hal_self'
      - type: object
        properties:
          amount:
            $ref: '#/definitions/amount'
          address:
            $ref: '#/definitions/address'
          message:
            $ref: '#/definitions/address'
          created:
            $ref: '#/definitions/created'
  order_cancel:
    allOf:
      - $ref: '#/definitions/hal_self'
      - type: object
        properties:
          reason:
            type: string
            maxLength: 600
          webhook:
            $ref: '#/definitions/webhook'
          created:
            $ref: '#/definitions/created'
          status:
            readOnly: true
            type: string
            enum:
              - pending
              - completed
              - failed

  # Object Properties
  person:
    type: object
    required:
      - name
      - email
    properties:
      name:
        type: string
        maxLength: 100
      email:
        type: string
        maxLength: 100
  address:
    type: object
    required:
      - street
      - city
      - postal
      - country
    properties:
      street:
        type: string
      city:
        type: string
      postal:
        type: string
      country:
        type: string

  #HAL
  hal_link:
    type: object
    readOnly: true
    properties:
      href:
        type: string
        format: url
  hal_self:
    type: object
    properties:
      self:
        $ref: '#/definitions/hal_link'
  hal_paging:
    type: object
    required:
      - self
      - first
      - last
    properties:
      self:
        $ref: '#/definitions/hal_link'
      next:
        $ref: '#/definitions/hal_link'
      prev:
        $ref: '#/definitions/hal_link'
      first:
        $ref: '#/definitions/hal_link'
      last:
        $ref: '#/definitions/hal_link'

  # Simple Properties
  amount:
    description: Amount of Items
    type: integer
    minimum: 12
    maximum: 144
  message:
    type: string
    maxLength: 600
  created:
    type: string
    format: date-time
    readOnly: true
  webhook:
    type: string
    format: url

# Reusable Parameters
parameters:
  order_id:
    in: path
    name: order_id
    description: Order ID
    required: true
    type: string
    format: uuid
  status:
    name: status
    in: query
    type: string
    enum:
      - pending
      - canceled
      - delivering
      - completed
  start_date:
    name: start_date
    in: query
    type: string
    format: date-time
  end_date:
    name: end_date
    in: query
    type: string
    format: date-time